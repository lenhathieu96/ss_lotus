// File generated by FlutterFire CLI.
// ignore_for_file: type=lint
import 'dart:io';

import 'package:flutter_dotenv/flutter_dotenv.dart';
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;

/// Default [FirebaseOptions] for use with your Firebase apps.
///
/// Example:
/// ```dart
/// import 'firebase_options.dart';
/// // ...
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform,
/// );
/// ```
class DefaultFirebaseOptions {
  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      return web;
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for android - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.iOS:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for ios - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.macOS:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for macos - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.windows:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for windows - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  static FirebaseOptions web = FirebaseOptions(
    apiKey: Platform.environment['GITHUB_ACTIONS'] == 'true'
        ? Platform.environment['FIREBASE_API_KEY'] as String
        : dotenv.get('FIREBASE_API_KEY'),
    appId: Platform.environment['GITHUB_ACTIONS'] == 'true'
        ? Platform.environment['FIREBASE_APP_ID'] as String
        : dotenv.get('FIREBASE_APP_ID'),
    messagingSenderId: Platform.environment['GITHUB_ACTIONS'] == 'true'
        ? Platform.environment['FIREBASE_MESSAGING_SENDER_ID'] as String
        : dotenv.get('FIREBASE_MESSAGING_SENDER_ID'),
    projectId: Platform.environment['GITHUB_ACTIONS'] == 'true'
        ? Platform.environment['FIREBASE_PROJECT_ID'] as String
        : dotenv.get('FIREBASE_PROJECT_ID'),
    authDomain: Platform.environment['GITHUB_ACTIONS'] == 'true'
        ? Platform.environment['FIREBASE_AUTH_DOMAIN'] as String
        : dotenv.get('FIREBASE_AUTH_DOMAIN'),
    storageBucket: Platform.environment['GITHUB_ACTIONS'] == 'true'
        ? Platform.environment['FIREBASE_STORAGE_BUCKET'] as String
        : dotenv.get('FIREBASE_STORAGE_BUCKET'),
    measurementId: Platform.environment['GITHUB_ACTIONS'] == 'true'
        ? Platform.environment['FIREBASE_MEASUREMENT_ID'] as String
        : dotenv.get('FIREBASE_MEASUREMENT_ID'),
  );
}
